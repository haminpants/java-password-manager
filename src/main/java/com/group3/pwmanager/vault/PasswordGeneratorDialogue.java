package com.group3.pwmanager.vault;

import com.group3.pwmanager.PasswordUtils;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class PasswordGeneratorDialogue {
    private JPanel pnl_main;
    private JPasswordField pwd_password;
    private JCheckBox cb_lowercase;
    private JCheckBox cb_uppercase;
    private JCheckBox cb_numbers;
    private JSpinner spn_length;
    private JCheckBox cb_specialChars;
    private JButton btn_toggleVisibility;
    private JButton btn_apply;
    private JButton btn_copy;
    private JButton btn_generatePassword;

    private final JDialog dialog;
    private final char echoChar;
    private Vault vault;
    private VaultEntry entry;

    public PasswordGeneratorDialogue (Window owner) {
        dialog = new JDialog(owner, Dialog.ModalityType.APPLICATION_MODAL);
        dialog.setTitle("Password Generator");
        dialog.setContentPane(pnl_main);
        dialog.pack();
        dialog.setLocationRelativeTo(owner);
        dialog.getRootPane().setDefaultButton(btn_generatePassword);
        dialog.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);

        // Set parameters
        this.echoChar = pwd_password.getEchoChar();

        // Set up spinner
        spn_length.setModel(new SpinnerNumberModel(16, 8, 32, 1));

        // Set up buttons
        btn_generatePassword.addActionListener(event -> {
            boolean useLowercase = cb_lowercase.isSelected();
            boolean useUppercase = cb_uppercase.isSelected();
            boolean useNumbers = cb_numbers.isSelected();
            boolean useSpecialChars = cb_specialChars.isSelected();
            int length = (int) spn_length.getValue();

            if (!useLowercase && !useUppercase && !useNumbers && !useSpecialChars) {
                JOptionPane.showMessageDialog(dialog, "One option must be selected to generate a password", "Oops!",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }

            pwd_password.setText(
                PasswordUtils.generatePassword(useUppercase, useLowercase, useNumbers, useSpecialChars, length));
        });

        btn_toggleVisibility.addActionListener(
            event -> pwd_password.setEchoChar(pwd_password.getEchoChar() == echoChar ? (char) 0 : echoChar));

        btn_copy.addActionListener(event -> Toolkit.getDefaultToolkit()
            .getSystemClipboard()
            .setContents(new StringSelection(new String(pwd_password.getPassword())), null));

        btn_apply.addActionListener(event -> {
            if (entry == null || vault == null) {
                btn_apply.setEnabled(false);
                return;
            }
            entry.setPassword(new String(pwd_password.getPassword()));
            vault.setUnsavedChanges(true);
        });

        // Set up keybinds
        pnl_main.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
            .put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "cancel");
        pnl_main.getActionMap().put("cancel", new AbstractAction() {
            @Override
            public void actionPerformed (ActionEvent e) {
                onCancel();
            }
        });

        // Set up window close
        dialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing (WindowEvent e) {
                onCancel();
            }
        });
    }

    public PasswordGeneratorDialogue (Window owner, Vault vault, VaultEntry entry) {
        this(owner);
        this.vault = vault;
        setEntry(entry);
    }

    private void onCancel () {
        dialog.dispose();
    }

    public void show () {
        dialog.setVisible(true);
    }

    private void setEntry (VaultEntry entry) {
        this.entry = entry;
        btn_apply.setEnabled(entry != null);
    }

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$ () {
        pnl_main = new JPanel();
        pnl_main.setLayout(new GridLayoutManager(6, 3, new Insets(0, 15, 15, 15), -1, -1));
        cb_uppercase = new JCheckBox();
        cb_uppercase.setSelected(true);
        cb_uppercase.setText("Uppercase (A-Z)");
        pnl_main.add(cb_uppercase,
            new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cb_lowercase = new JCheckBox();
        cb_lowercase.setSelected(true);
        cb_lowercase.setText("Lowercase (a-z)");
        pnl_main.add(cb_lowercase,
            new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cb_numbers = new JCheckBox();
        cb_numbers.setSelected(true);
        cb_numbers.setText("Numbers (0-9)");
        pnl_main.add(cb_numbers, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cb_specialChars = new JCheckBox();
        cb_specialChars.setSelected(true);
        cb_specialChars.setText("Special Characters");
        pnl_main.add(cb_specialChars,
            new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btn_apply = new JButton();
        btn_apply.setEnabled(false);
        btn_apply.setText("Apply Password");
        pnl_main.add(btn_apply,
            new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btn_copy = new JButton();
        btn_copy.setText("Copy Password");
        pnl_main.add(btn_copy,
            new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        pnl_main.add(panel1,
            new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, 1, null,
                null, null, 0, false));
        pwd_password = new JPasswordField();
        pwd_password.setColumns(32);
        pwd_password.setEditable(true);
        panel1.add(pwd_password,
            new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1),
                null, 0, false));
        btn_generatePassword = new JButton();
        btn_generatePassword.setIcon(new ImageIcon(getClass().getResource("/form_assets/random_16px.png")));
        btn_generatePassword.setText("");
        btn_generatePassword.setToolTipText("Generate Password");
        panel1.add(btn_generatePassword,
            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btn_toggleVisibility = new JButton();
        btn_toggleVisibility.setIcon(new ImageIcon(getClass().getResource("/form_assets/visible_16px.png")));
        btn_toggleVisibility.setText("");
        panel1.add(btn_toggleVisibility,
            new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Length");
        pnl_main.add(label1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spn_length = new JSpinner();
        pnl_main.add(spn_length,
            new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(20, -1), null, null,
                0, false));
        final JSeparator separator1 = new JSeparator();
        pnl_main.add(separator1,
            new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$ () { return pnl_main; }

}